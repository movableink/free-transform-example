{"version":3,"sources":["vendor/ember-cli/app-prefix.js","free-transform-example/app.js","free-transform-example/components/free-transform-container.js","free-transform-example/components/free-transform.js","free-transform-example/controllers/application.js","free-transform-example/initializers/app-version.js","free-transform-example/initializers/export-application-global.js","free-transform-example/mixins/guides.js","free-transform-example/router.js","free-transform-example/templates/application.js","free-transform-example/templates/components/free-transform-container.js","free-transform-example/templates/components/free-transform.js","free-transform-example/tests/app.jshint.js","free-transform-example/tests/components/free-transform-container.jshint.js","free-transform-example/tests/components/free-transform.jshint.js","free-transform-example/tests/controllers/application.jshint.js","free-transform-example/tests/helpers/resolver.js","free-transform-example/tests/helpers/resolver.jshint.js","free-transform-example/tests/helpers/start-app.js","free-transform-example/tests/helpers/start-app.jshint.js","free-transform-example/tests/mixins/guides.jshint.js","free-transform-example/tests/router.jshint.js","free-transform-example/tests/test-helper.js","free-transform-example/tests/test-helper.jshint.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('free-transform-example/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'free-transform-example/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('free-transform-example/components/free-transform-container', ['exports', 'ember', 'free-transform-example/mixins/guides'], function (exports, Em, Guides) {\n\n  'use strict';\n\n  var FreeTransformContainer = Em['default'].Component.extend(Guides['default'], {\n    _dragging: false,\n    deltaX: 0,\n    deltaY: 0,\n    selectedModels: Em['default'].A(),\n\n    // update our deltaX and deltaY, which get propagated to all free-transform\n    // components\n    mouseMove: function mouseMove(event) {\n      if (!this._dragging) {\n        return;\n      }\n\n      // it's probably better if our offsets are in whole numbers\n      var deltaY = Math.round(event.screenY - this.startY);\n      var deltaX = Math.round(event.screenX - this.startX);\n\n      this.setProperties({\n        deltaY: deltaY,\n        deltaX: deltaX\n      });\n\n      this.checkForGuides(deltaY, deltaX);\n    },\n\n    actions: {\n      dragStart: function dragStart(startX, startY) {\n        this._dragging = true;\n        this.startX = startX;\n        this.startY = startY;\n\n        this.setGuideEdges();\n      },\n\n      dragEnd: function dragEnd() {\n        this._dragging = false;\n\n        this.trigger(\"finish\"); // all free-transform components receive this\n        this.setProperties({ deltaX: 0, deltaY: 0 });\n\n        this.clearGuides();\n      },\n\n      toggleSelected: function toggleSelected(model) {\n        if (this.get(\"selectedModels\").contains(model)) {\n          this.get(\"selectedModels\").removeObject(model);\n        } else {\n          this.get(\"selectedModels\").addObject(model);\n        }\n      }\n    }\n  });\n\n  exports['default'] = FreeTransformContainer;\n\n});","define('free-transform-example/components/free-transform', ['exports', 'ember'], function (exports, Em) {\n\n  'use strict';\n\n  var FreeTransform = Em['default'].Component.extend({\n    dragging: false,\n    draggingCorner: null, // corner that is currently being dragged\n    selected: false,\n\n    // How far element has been dragged from original position\n    deltaX: 0,\n    deltaY: 0,\n    deltaW: 0,\n    deltaH: 0,\n    containerDeltaX: 0,\n    containerDeltaY: 0,\n\n    didInsertElement: function didInsertElement() {\n      var _this = this;\n      [\"tl\", \"tr\", \"bl\", \"br\"].forEach(function (corner) {\n        _this.setupResizeCorner(corner);\n      });\n    },\n\n    // We need to receive a 'finish' event from the container to let us know the\n    // drag has completed.  It's a bit hacky.\n    setupFinishEvent: (function () {\n      var _this = this;\n      this.get(\"container\").on(\"finish\", function () {\n        if (_this.get(\"selected\")) {\n          _this.finalizeDrag();\n        }\n      });\n    }).on(\"init\"),\n\n    // Add handlers to the corners\n    setupResizeCorner: function setupResizeCorner(corner) {\n      var _this = this;\n      this.$(\".overlay\").on(\"mousedown\", \".\" + corner, function (event) {\n        // Don't drag the entire element, just the corner\n        event.stopPropagation();\n\n        _this.draggingCorner = corner;\n        _this.startX = event.screenX;\n        _this.startY = event.screenY;\n\n        // We could attach the handlers to just the corners themselves, but it\n        // means that if your mouse happens to move off the corner handle by even\n        // a pixel, the mousemove will be broken.  Attaching to the parent container\n        // allows us to ensure we always capture the mousemove events.\n        var workspace = _this.$().parent().parent();\n\n        workspace.on(\"mousemove\", function (event) {\n          _this.moveCorner(event);\n        });\n\n        workspace.one(\"mouseup\", function (event) {\n          event.stopPropagation();\n          workspace.off(\"mousemove\");\n          _this.finalizeDrag();\n          _this.draggingCorner = null;\n        });\n      });\n    },\n\n    // Compute the deltas as we drag the corners. Some corners only change the\n    // width/height, while others can change the width/height/top/left values.\n    moveCorner: function moveCorner(event) {\n      var deltaX = event.screenX - this.startX;\n      var deltaY = event.screenY - this.startY;\n\n      if (this.draggingCorner === \"tl\" || this.draggingCorner === \"bl\") {\n        // when dragging left handle, width changes inversely to left offset\n        var deltaW = deltaX * -1;\n        this.setProperties({ deltaX: deltaX, deltaW: deltaW });\n      } else {\n        this.set(\"deltaW\", deltaX);\n      }\n\n      if (this.draggingCorner === \"tl\" || this.draggingCorner === \"tr\") {\n        // when dragging top handle, height changes inversely to top offset\n        var deltaH = deltaY * -1;\n        this.setProperties({ deltaY: deltaY, deltaH: deltaH });\n      } else {\n        this.set(\"deltaH\", deltaY);\n      }\n    },\n\n    // As we move the mouse, we've been modifying the delta values. Add those into\n    // the model's values and set the deltas back to zero.\n    finalizeDrag: function finalizeDrag() {\n      this.setProperties({\n        \"model.top\": this.get(\"top\"),\n        \"model.left\": this.get(\"left\"),\n        \"model.width\": this.get(\"width\"),\n        \"model.height\": this.get(\"height\"),\n        deltaX: 0,\n        deltaY: 0,\n        deltaW: 0,\n        deltaH: 0\n      });\n    },\n\n    // Only augment our offset with the container's offset if we're selected\n    groupDeltaY: (function () {\n      if (this.get(\"selected\")) {\n        return this.get(\"containerDeltaY\");\n      }\n      return 0;\n    }).property(\"containerDeltaY\", \"selected\"),\n\n    groupDeltaX: (function () {\n      if (this.get(\"selected\")) {\n        return this.get(\"containerDeltaX\");\n      }\n      return 0;\n    }).property(\"containerDeltaX\", \"selected\"),\n\n    // Used for setting the element's CSS as element is dragged\n    top: (function () {\n      return this.get(\"model.top\") + this.get(\"deltaY\") + this.get(\"groupDeltaY\");\n    }).property(\"model.top\", \"deltaY\", \"groupDeltaY\"),\n\n    left: (function () {\n      return this.get(\"model.left\") + this.get(\"deltaX\") + this.get(\"groupDeltaX\");\n    }).property(\"model.left\", \"deltaX\", \"groupDeltaX\"),\n\n    width: (function () {\n      return this.get(\"model.width\") + this.get(\"deltaW\");\n    }).property(\"model.width\", \"deltaW\"),\n\n    height: (function () {\n      return this.get(\"model.height\") + this.get(\"deltaH\");\n    }).property(\"model.height\", \"deltaH\"),\n\n    // Actions\n    mouseDown: function mouseDown(event) {\n      this.sendAction(\"dragStart\", event.screenX, event.screenY);\n    },\n\n    mouseUp: function mouseUp() {\n      this.sendAction(\"dragEnd\");\n      if (this.get(\"containerDeltaX\") === 0 && this.get(\"containerDeltaY\") === 0) {\n        this.toggleProperty(\"selected\");\n        this.sendAction(\"toggleSelected\", this.get(\"model\"));\n      }\n    }\n  });\n\n  exports['default'] = FreeTransform;\n\n});","define('free-transform-example/controllers/application', ['exports', 'ember', 'jquery'], function (exports, Em, $) {\n\n  'use strict';\n\n  var ApplicationController = Em['default'].Controller.extend({\n\n    // Brute-force function to generate a list of non-overlapping models\n    models: (function () {\n      var x, y, found;\n\n      var iterations = 0;\n      var count = 500;\n      var size = 50;\n      var width = $['default'](document).width() - size;\n      var height = $['default'](document).height() - size;\n      var affordance = size + 10;\n\n      var modelList = [];\n      for (var i = 0; i < count; i++) {\n        found = false;\n        while (!found) {\n          iterations += 1;\n          x = Math.floor(Math.random() * (width - size));\n          y = Math.floor(Math.random() * (height - size));\n\n          found = true;\n          for (var j = 0, len = modelList.length; j < len; j++) {\n            var model = modelList[j];\n            if (model.get(\"top\") > y - affordance && model.get(\"top\") < y + affordance && model.get(\"left\") > x - affordance && model.get(\"left\") < x + affordance) {\n              found = false;\n              break;\n            }\n          }\n          if (iterations > 5000) {\n            return modelList;\n          }\n        }\n        modelList.push(Em['default'].Object.create({ top: y, left: x, width: size, height: size }));\n      }\n      return modelList;\n    }).property()\n  });\n\n  exports['default'] = ApplicationController;\n\n});","define('free-transform-example/initializers/app-version', ['exports', 'free-transform-example/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n\n  exports['default'] = {\n    name: \"App Version\",\n    initialize: function initialize(container, application) {\n      var appName = classify(application.toString());\n      Ember['default'].libraries.register(appName, config['default'].APP.version);\n    }\n  };\n\n});","define('free-transform-example/initializers/export-application-global', ['exports', 'ember', 'free-transform-example/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  };\n\n  exports['default'] = {\n    name: \"export-application-global\",\n\n    initialize: initialize\n  };\n\n});","define('free-transform-example/mixins/guides', ['exports', 'ember'], function (exports, Em) {\n\n  'use strict';\n\n  var Guides = Em['default'].Mixin.create({\n    horizontalGuides: Em['default'].A(),\n    verticalGuides: Em['default'].A(),\n\n    // Check to see if any of the selected models' edges align with any of\n    // the unselected models' edges, and create guides.\n    checkForGuides: function checkForGuides(topDelta, leftDelta) {\n      var i, len, mid, edge;\n      this.get(\"horizontalGuides\").clear();\n      this.get(\"verticalGuides\").clear();\n\n      for (i = 0, len = this.selectedMidpointsH.length; i < len; i++) {\n        mid = this.selectedMidpointsH[i];\n        if (this.get(\"midpointsH\").indexOf(mid + topDelta) >= 0) {\n          this.get(\"horizontalGuides\").pushObject(mid + topDelta);\n        }\n      }\n\n      for (i = 0, len = this.selectedMidpointsV.length; i < len; i++) {\n        mid = this.selectedMidpointsV[i];\n        if (this.get(\"midpointsV\").indexOf(mid + leftDelta) >= 0) {\n          this.get(\"verticalGuides\").pushObject(mid + leftDelta);\n        }\n      }\n\n      for (i = 0, len = this.selectedEdgesH.length; i < len; i++) {\n        edge = this.selectedEdgesH[i];\n        if (this.get(\"edgesH\").indexOf(edge + topDelta) >= 0) {\n          this.get(\"horizontalGuides\").pushObject(edge + topDelta);\n        }\n      }\n\n      for (i = 0, len = this.selectedEdgesV.length; i < len; i++) {\n        edge = this.selectedEdgesV[i];\n        if (this.get(\"edgesV\").indexOf(edge + leftDelta) >= 0) {\n          this.get(\"verticalGuides\").pushObject(edge + leftDelta);\n        }\n      }\n    },\n\n    // returns an array of both edges given the selected offset (left, top) and\n    // dimension (width, height)\n    getEdges: function getEdges(models, offset, dimension) {\n      var edges = [];\n      for (var i = 0, len = models.length; i < len; i++) {\n        var model = models[i];\n        edges.push(model.get(offset));\n        edges.push(model.get(offset) + model.get(dimension));\n      }\n\n      return edges;\n    },\n\n    // returns an array of midpoints for a list of models\n    getMidpoints: function getMidpoints(models, offset, dimension) {\n      var midpoints = [];\n      for (var i = 0, len = models.length; i < len; i++) {\n        var model = models[i];\n        midpoints.push(model.get(offset) + Math.round(model.get(dimension)) / 2);\n      }\n\n      return midpoints;\n    },\n\n    // Find all of the edges of all models and group them by selected/non-selected\n    // in preparation for highlight alignment\n    setGuideEdges: function setGuideEdges() {\n      var models = this.get(\"models\");\n      var selected = this.get(\"selectedModels\");\n\n      var subtract = function subtract(a, b) {\n        return a.reject(function (i) {\n          return b.contains(i);\n        });\n      };\n\n      var unselected = subtract(models, selected);\n\n      // top and bottom edges of all selected elements\n      this.selectedEdgesH = this.getEdges(selected, \"top\", \"height\");\n      // top and bottom edges of unselected elements\n      this.edgesH = this.getEdges(unselected, \"top\", \"height\");\n      this.selectedEdgesV = this.getEdges(selected, \"left\", \"width\");\n      this.edgesV = this.getEdges(unselected, \"left\", \"width\");\n\n      // middle points for selected elements\n      this.selectedMidpointsH = this.getMidpoints(selected, \"top\", \"height\");\n      this.midpointsH = this.getMidpoints(unselected, \"top\", \"height\");\n      this.selectedMidpointsV = this.getMidpoints(selected, \"left\", \"width\");\n      this.midpointsV = this.getMidpoints(unselected, \"left\", \"width\");\n\n      // sorting in advance makes it quicker to match edges\n      this.selectedEdgesH.sort();\n      this.selectedEdgesV.sort();\n\n      this.checkForGuides(0, 0);\n    },\n\n    clearGuides: function clearGuides() {\n      this.get(\"horizontalGuides\").clear();\n      this.get(\"verticalGuides\").clear();\n    }\n\n  });\n\n  exports['default'] = Guides;\n\n});","define('free-transform-example/router', ['exports', 'ember', 'free-transform-example/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {});\n\n  exports['default'] = Router;\n\n});","define('free-transform-example/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0-beta.1+canary.d246e754\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1+canary.d246e754\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"header\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h1\");\n        var el3 = dom.createTextNode(\"Free Transform\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h2\");\n        var el3 = dom.createTextNode(\"controller.model:\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"table\");\n        dom.setAttribute(el2,\"class\",\"data\");\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"tr\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"th\");\n        var el5 = dom.createTextNode(\"Left\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"th\");\n        var el5 = dom.createTextNode(\"Top\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"th\");\n        var el5 = dom.createTextNode(\"Width\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"th\");\n        var el5 = dom.createTextNode(\"Height\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createElement(\"tr\");\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"td\");\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"td\");\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"td\");\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n      \");\n        dom.appendChild(el3, el4);\n        var el4 = dom.createElement(\"td\");\n        var el5 = dom.createComment(\"\");\n        dom.appendChild(el4, el5);\n        dom.appendChild(el3, el4);\n        var el4 = dom.createTextNode(\"\\n    \");\n        dom.appendChild(el3, el4);\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, get = hooks.get, component = hooks.component;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0, 5, 3]);\n        var morph0 = dom.createMorphAt(dom.childAt(element0, [1]),0,0);\n        var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),0,0);\n        var morph2 = dom.createMorphAt(dom.childAt(element0, [5]),0,0);\n        var morph3 = dom.createMorphAt(dom.childAt(element0, [7]),0,0);\n        var morph4 = dom.createMorphAt(fragment,2,2,contextualElement);\n        content(env, morph0, context, \"model.left\");\n        content(env, morph1, context, \"model.top\");\n        content(env, morph2, context, \"model.width\");\n        content(env, morph3, context, \"model.height\");\n        component(env, morph4, context, \"free-transform-container\", {\"models\": get(env, context, \"models\")}, child0);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('free-transform-example/templates/components/free-transform-container', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      var child0 = (function() {\n        return {\n          isHTMLBars: true,\n          revision: \"Ember@1.12.0-beta.1+canary.d246e754\",\n          blockParams: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          build: function build(dom) {\n            var el0 = dom.createDocumentFragment();\n            return el0;\n          },\n          render: function render(context, env, contextualElement) {\n            var dom = env.dom;\n            dom.detectNamespace(contextualElement);\n            var fragment;\n            if (env.useFragmentCache && dom.canClone) {\n              if (this.cachedFragment === null) {\n                fragment = this.build(dom);\n                if (this.hasRendered) {\n                  this.cachedFragment = fragment;\n                } else {\n                  this.hasRendered = true;\n                }\n              }\n              if (this.cachedFragment) {\n                fragment = dom.cloneNode(this.cachedFragment, true);\n              }\n            } else {\n              fragment = this.build(dom);\n            }\n            return fragment;\n          }\n        };\n      }());\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0-beta.1+canary.d246e754\",\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment(\"\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, component = hooks.component;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,1,1,contextualElement);\n          set(env, context, \"model\", blockArguments[0]);\n          component(env, morph0, context, \"free-transform\", {\"dragStart\": \"dragStart\", \"dragEnd\": \"dragEnd\", \"toggleSelected\": \"toggleSelected\", \"model\": get(env, context, \"model\"), \"containerDeltaX\": get(env, context, \"deltaX\"), \"containerDeltaY\": get(env, context, \"deltaY\"), \"container\": get(env, context, \"this\")}, child0);\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0-beta.1+canary.d246e754\",\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"hguide\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element1 = dom.childAt(fragment, [1]);\n          var attrMorph0 = dom.createAttrMorph(element1, 'style');\n          set(env, context, \"guide\", blockArguments[0]);\n          attribute(env, attrMorph0, element1, \"style\", concat(env, [\"top: \", get(env, context, \"guide\"), \"px;\"]));\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0-beta.1+canary.d246e754\",\n        blockParams: 1,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"vguide\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement, blockArguments) {\n          var dom = env.dom;\n          var hooks = env.hooks, set = hooks.set, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var attrMorph0 = dom.createAttrMorph(element0, 'style');\n          set(env, context, \"guide\", blockArguments[0]);\n          attribute(env, attrMorph0, element0, \"style\", concat(env, [\"left: \", get(env, context, \"guide\"), \"px;\"]));\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1+canary.d246e754\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"canvas\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element2 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(element2,1,1);\n        var morph1 = dom.createMorphAt(element2,3,3);\n        var morph2 = dom.createMorphAt(element2,5,5);\n        block(env, morph0, context, \"each\", [get(env, context, \"models\")], {}, child0, null);\n        block(env, morph1, context, \"each\", [get(env, context, \"horizontalGuides\")], {}, child1, null);\n        block(env, morph2, context, \"each\", [get(env, context, \"verticalGuides\")], {}, child2, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('free-transform-example/templates/components/free-transform', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0-beta.1+canary.d246e754\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"handle tl\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"handle tr\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"handle bl\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"div\");\n          dom.setAttribute(el1,\"class\",\"handle br\");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0-beta.1+canary.d246e754\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        dom.setAttribute(el1,\"class\",\"overlay\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createComment(\"\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, get = hooks.get, concat = hooks.concat, attribute = hooks.attribute, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var element1 = dom.childAt(fragment, [2]);\n        var attrMorph0 = dom.createAttrMorph(element0, 'style');\n        var morph0 = dom.createMorphAt(element1,1,1);\n        var attrMorph1 = dom.createAttrMorph(element1, 'style');\n        attribute(env, attrMorph0, element0, \"style\", concat(env, [\"position: absolute; top: \", get(env, context, \"top\"), \"px; left: \", get(env, context, \"left\"), \"px; width: \", get(env, context, \"width\"), \"px; height: \", get(env, context, \"height\"), \"px; background-color: #6AF;\"]));\n        attribute(env, attrMorph1, element1, \"style\", concat(env, [\"top: \", get(env, context, \"top\"), \"px; left: \", get(env, context, \"left\"), \"px; width: \", get(env, context, \"width\"), \"px; height: \", get(env, context, \"height\"), \"px;\"]));\n        block(env, morph0, context, \"if\", [get(env, context, \"selected\")], {}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('free-transform-example/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('free-transform-example/tests/components/free-transform-container.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/free-transform-container.js should pass jshint', function() { \n    ok(true, 'components/free-transform-container.js should pass jshint.'); \n  });\n\n});","define('free-transform-example/tests/components/free-transform.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - components');\n  test('components/free-transform.js should pass jshint', function() { \n    ok(true, 'components/free-transform.js should pass jshint.'); \n  });\n\n});","define('free-transform-example/tests/controllers/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/application.js should pass jshint', function() { \n    ok(true, 'controllers/application.js should pass jshint.'); \n  });\n\n});","define('free-transform-example/tests/helpers/resolver', ['exports', 'ember/resolver', 'free-transform-example/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('free-transform-example/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('free-transform-example/tests/helpers/start-app', ['exports', 'ember', 'free-transform-example/app', 'free-transform-example/router', 'free-transform-example/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('free-transform-example/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('free-transform-example/tests/mixins/guides.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - mixins');\n  test('mixins/guides.js should pass jshint', function() { \n    ok(true, 'mixins/guides.js should pass jshint.'); \n  });\n\n});","define('free-transform-example/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('free-transform-example/tests/test-helper', ['free-transform-example/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('free-transform-example/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('free-transform-example/config/environment', ['ember'], function(Ember) {\n  var prefix = 'free-transform-example';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"free-transform-example/tests/test-helper\");\n} else {\n  require(\"free-transform-example/app\")[\"default\"].create({\"name\":\"free-transform-example\",\"version\":\"0.0.0.9a82fcff\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACftJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"free-transform-example.js"}